{
	"name": "DataTransformation_events",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Veestorage_Input",
						"type": "DatasetReference"
					},
					"name": "Input"
				},
				{
					"dataset": {
						"referenceName": "DS_Index_input",
						"type": "DatasetReference"
					},
					"name": "index"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_output",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "countevent"
				},
				{
					"name": "ModifyEvents"
				},
				{
					"name": "join"
				},
				{
					"name": "select"
				},
				{
					"name": "Final",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          user_id as integer,",
				"          event_name as string,",
				"          event_date as date,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Input",
				"source(output(",
				"          country as string,",
				"          index as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> index",
				"Input aggregate(groupBy(event_name,",
				"          country),",
				"     total_events = count(event_name)) ~> countevent",
				"countevent derive(total_events_in_Hundreds = total_events*100) ~> ModifyEvents",
				"ModifyEvents, index join(countevent@country == index@country,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"join select(mapColumn(",
				"          event_name,",
				"          country = countevent@country,",
				"          total_events = total_events_in_Hundreds,",
				"          indexnum = index",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"select derive(total_events = toInteger(total_events),",
				"          indexnum = toInteger(indexnum)) ~> Final",
				"Final sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          event_name as string,",
				"          country as string,",
				"          total as integer,",
				"          indexnum as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          event_name,",
				"          country,",
				"          total = total_events,",
				"          indexnum",
				"     )) ~> sink"
			]
		}
	}
}